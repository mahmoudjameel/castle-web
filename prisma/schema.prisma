generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  name                 String
  email                String             @unique
  password             String
  role                 String             @default("USER")
  approved             Boolean            @default(false)
  profileImageData     Bytes?
  age                  Int?
  bio                  String?
  socialLinks          String?
  createdAt            DateTime           @default(now())
  workingSchedule      String?
  jobTitle             String?
  services             String?
  workArea             String?
  canTravelAbroad      Boolean?
  phone                String?            @unique
  resetToken           String?
  resetTokenExpiry     DateTime?
  accent               String?
  eyeColor             String?
  features             String?
  hairColor            String?
  hairStyle            String?
  height               Int?
  language             String?
  skinColor            String?
  weight               Int?
  receivedMessages     Message[]          @relation("ReceivedMessages")
  sentMessages         Message[]          @relation("SentMessages")
  notifications        Notification[]
  portfolioItems       PortfolioItem[]

  reportsReceived      Report[]           @relation("ReportsAsReported")
  reportsSent          Report[]           @relation("ReportsAsReporter")
  clientOrders         TalentOrder[]      @relation("TalentOrdersAsClient")
  talentOrders         TalentOrder[]      @relation("TalentOrdersAsTalent")
  talentReviews        TalentReview[]
  transactionsReceived Transaction[]      @relation("Receiver")
  transactions         Transaction[]      @relation("Sender")
  userCategories       UserCategory[]
  wallet               Wallet?
  withdrawals          Withdrawal[]
}

model Category {
  id             String         @id
  name           String
  imageUrl       String?
  imageData      Bytes?
  createdAt      DateTime       @default(now())
  userCategories UserCategory[]
}

model PortfolioItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String?
  mediaData Bytes?
  mediaUrl  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model TalentReview {
  id           Int      @id @default(autoincrement())
  userId       Int
  reviewerName String
  rating       Int
  comment      String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model TalentOrder {
  id            Int           @id @default(autoincrement())
  talentId      Int
  clientId      Int
  services      String
  message       String?
  date          String?
  status        String        @default("new")
  createdAt     DateTime      @default(now())
  phone         String?
  address       String?
  userConfirmed Boolean       @default(false)
  client        User          @relation("TalentOrdersAsClient", fields: [clientId], references: [id])
  talent        User          @relation("TalentOrdersAsTalent", fields: [talentId], references: [id])
  transactions  Transaction[]
}

model Notification {
  id     Int      @id @default(autoincrement())
  userId Int
  title  String
  body   String
  date   DateTime @default(now())
  read   Boolean  @default(false)
  user   User     @relation(fields: [userId], references: [id])
}



model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model HeroBanner {
  id        Int      @id @default(autoincrement())
  title     String
  subtitle  String
  imageUrl  String?
  imageData Bytes?
  ctaText   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
}

model Wallet {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  balance        Float    @default(0)
  totalEarned    Float    @default(0)
  totalWithdrawn Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id          Int       @id @default(autoincrement())
  userId      Int
  amount      Float
  bankAccount String?
  status      String    @default("pending")
  notes       String?
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id          Int          @id @default(autoincrement())
  type        String
  amount      Float
  description String
  status      String       @default("pending")
  senderId    Int?
  receiverId  Int?
  orderId     Int?
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  reference   String?
  order       TalentOrder? @relation(fields: [orderId], references: [id])
  receiver    User?        @relation("Receiver", fields: [receiverId], references: [id])
  sender      User?        @relation("Sender", fields: [senderId], references: [id])
}

model Settings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

model Report {
  id             Int      @id @default(autoincrement())
  reporterId     Int
  reportedUserId Int
  reason         String
  description    String
  status         String   @default("pending")
  adminNotes     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reportedUser   User     @relation("ReportsAsReported", fields: [reportedUserId], references: [id])
  reporter       User     @relation("ReportsAsReporter", fields: [reporterId], references: [id])
}

model UserCategory {
  userId     Int
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, categoryId])
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
